# This is a template workflow 

name: Deploy Mule APIs to CloudHub

permissions:
  contents: read
  issues: write
  checks: write
  pull-requests: write

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the qa, main branch
  push:
    branches:
      - main
    # Don't trigger the workflow when only workflow file / gitignore / README has the changes
    paths-ignore: 
      # - '.github/workflows/**'
      - '.gitignore'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      allowBuild:
        description: 'Allow Build?'
        required: false
        default: true
        type: choice
        options:
        - true
        - false
      pomVer:
        description: 'Pom version to deploy'
        required: false
        type: string

jobs:

  build:
    name: Test & Build
    # The type of runner that the job will run on
    environment: dev
    runs-on: ubuntu-latest
    if: (inputs.allowBuild == 'true') 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # - name: Get access_token
      
    #   run: |
    #     curl -d "client_id=${{secrets.CONNECTED_APP_CLIENT_ID}}&client_secret=${{secrets.CONNECTED_APP_CLIENT_SECRET}}&grant_type=client_credentials" -H "Content-Type: application/x-www-form-urlencoded" -X POST https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token	 -o response.json
    #     echo "access_token=$(jq -r '.access_token' response.json)" >> $GITHUB_ENV 
    # - name: Print Access token
    #   run: echo $access_token
    # - name: Call Monitoring Tests
    #   run: curl -X POST https://anypoint.mulesoft.com/apitesting/xapi/v1/organizations/${{secrets.BUS_GRP_ID}}/suites/${{secrets.BUS_GRP_ID}}:${{vars.TEST_NAME}}/versions/${{vars.TEST_VERSION}}/executions -H "Content-Type:application/json" -H "Authorization:Bearer ${access_token}"  -d '{"configuration":"${{vars.CLOUDHUB_ENV}}", "targetId":"${{vars.TEST_TARGET}}"}' 
    # # steps:
    # - name: Get access_token
    #   run: |
    #     curl -d "client_id=8038e0bf437b413385f37526a1f2baf1&client_secret=dd1683d9f8194f67AcdaeDa6d468807a&grant_type=client_credentials" -H "Content-Type: application/x-www-form-urlencoded" -X POST https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token	 -o response.json
    #     echo "access_token=$(jq -r '.access_token' response.json)" >> $GITHUB_ENV 
    # - name: Print Access token
    #   run: echo $access_token
    # - name: Call Monitoring Tests
    #   run: curl -X POST https://anypoint.mulesoft.com/apitesting/xapi/v1/organizations/f015bd3e-6860-45a2-8012-1af3eec6fdba/suites/f015bd3e-6860-45a2-8012-1af3eec6fdba:test-afm/versions/1.0.16/executions -H "Content-Type:application/json" -H "Authorization:Bearer ${access_token}"  -d '{"configuration":"default","targetId":"8b749514-11f7-46bc-9980-6d177ce98c0c"}' 
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout this repo
        uses: actions/checkout@v4    

      - name: Get version
        run: echo $(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -s settings.xml)      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup JDK 1.8
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 8
          cache: maven
      
      - name: Test and Build Jar
        env:
          nexus_username: ${{ secrets.NEXUS_USERNAME }}
          nexus_password: ${{ secrets.NEXUS_PASSWORD }}
          env: ${{vars.MULE_ENV}}
          key: ${{secrets.SECRET_KEY}}
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B package -f pom.xml -s settings.xml -DskipTests
        # run: mvn -B verify  -f pom.xml -s settings.xml org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=API984-git_sonar-cloud-test 
                  
      # - name: Dorny Test Report
      #   if: always()
      #   id: dorny_summary
      #   uses: dorny/test-reporter@v1
      #   with:
      #     name: Test Summary
      #     path:  target/surefire-reports/*.xml
      #     reporter: java-junit
      #     fail-on-error: 'true'
          
      - name: Update Artifact name with commit hash, append date-time
        run: |
          artifactName1=$(ls target/*.jar | head -1)
          commitHash=$(git rev-parse --short "$GITHUB_SHA")
          artifactName2=$(echo $artifactName1 | sed "s/.jar/-$commitHash.`date +'%Y-%m-%d_%H%M%S'`.jar/g")
          mv $artifactName1 $artifactName2
          echo "ARTIFACT_NAME=$(echo $artifactName2 | cut -d"/" -f2 | sed "s/.jar//g")" >> $GITHUB_ENV
          
      - name: Print Artifact Name
        run: echo ${{env.ARTIFACT_NAME}}
        
      - name: Publish Artifact Jar
        uses: actions/upload-artifact@v4
        with:
            name: ${{env.ARTIFACT_NAME}}
            path: target/*.jar

  deploy-cloudhub-env:
    name: Deploy in cloudhub-env
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ github.workspace }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-    

    - name: Publish to Exchange
      env:
         CONNECTED_APP_CLIENT_ID : ${{ secrets.CONNECTED_APP_CLIENT_ID }}
         CONNECTED_APP_CLIENT_SECRET : ${{ secrets.CONNECTED_APP_CLIENT_SECRET }}
         NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
         NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}

      run: mvn -f pom.xml -s settings.xml deploy -DskipTests
            
      
    - name: Deploy to CloudHub
  #Pass in the secrets we need for deployment as environment variables
      env:
         CONNECTED_APP_CLIENT_ID : ${{ secrets.CONNECTED_APP_CLIENT_ID }}
         CONNECTED_APP_CLIENT_SECRET : ${{ secrets.CONNECTED_APP_CLIENT_SECRET }}
         NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
         NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
         MULE_ARTIFACT: ${{ secrets.ARTIFACT }}
         env: ${{vars.MULE_ENV}}
         environment: ${{vars.CLOUDHUB_ENV}}
         region: ${{vars.CLOUDHUB_REGION}}
         businessGroupId: ${{vars.BUSSINESS_GRP_ID}}
         applicationName: ${{vars.APP_NAME}}
         replicas: ${{vars.REPLICAS}}
         vCores: ${{vars.VCORES}}
         key: ${{secrets.SECRET_KEY}}
         server: ${{vars.SERVER}}
         
      run: |
         mvn mule:deploy -DskipTests -s settings.xml 

